
## Built-in modules: ##
from typing import Annotated
from uuid import UUID

## Third-party modules: ##
from pydantic import BaseModel, Field


class SymmetricKey(BaseModel):
    """Schema of representation a symmetric key.""" 
    key_id: Annotated[UUID, Field(
        default=...,
        alias="key_id",
        title="Key id.",
        description="Key id. Generated by uuid4.",
    )]
    sym_key: Annotated[bytes, Field(
        default=...,
        alias="sym_key",
        title="symmetric key.",
        description="symmetric key to encode the data.",
    )]
    key_iv: Annotated[bytes, Field(
        default=...,
        alias="key_iv",
        title="Key initialization vector.",
        description="Key initialization vector to encrypt / decrypt the data.",
    )]


class EncryptedSymmetricKey(BaseModel):
    asym_keys_id: Annotated[UUID, Field(
        default=...,
        alias="asym_keys_id",
        title="Asym public keys id.",
        description="UUID of Asymmetric public key, that used to encrypt the symmetric key.",
    )]
    key_id: Annotated[UUID, Field(
        default=...,
        alias="key_id",
        title="Sym key id.",
        description="UUID of symmetric key.",
    )]
    sym_key: Annotated[bytes, Field(
        default=...,
        alias="sym_key",
        title="symmetric key.",
        description="Encrypted symmetric key the data.",
    )]